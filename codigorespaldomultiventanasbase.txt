###################################################################################################
# Step 1 : Setup initial basic graphics
# Step 2: Update available COMs & Baude rate
# Step 3: Serial connection setup
# Step 4: Dynamic GUI update
# Step 5: Testing & Debugging


##NOTAS
#PARA GENERAR EL EJECUTABLE
# INSTALE SERIAL Y PYSERIAL
# pip install serial
# pip install pyserial
# ACTUALIZAR LA VERSION DE PYSERIAL
## pip install pyserial==2.7
# EN EL CMD UBIQUESE EN LA CARPETA QUE CONTIENE EL ARCHIVO .PY A VOLVER EJECUTABLE
# si desea un icono personalizado para su aplicacion cree la imagen con extension .ico y guardela en la carpeta del proyecto
# instale pyinstaller
# pip install pyinstaller
# para crear el ejecutable use la siguiente linea de comandos
# pyinstaller --windowed --onefile --icon=./nombre_imagen.ico nombre_archivo_a_volver_ejecutable.py

# Nota si ya genero el .exe debe eliminar las carpetas, dist,build: _pycache_ antes de generar un nuevo .exe
###################################################################################################




from tkinter import *
import serial.tools.list_ports
import threading
from tkinter import messagebox

def Programa():
    global root,Master,BrodSla,Slave,Broadcast,BtnvolverM
    Master= False
    BrodSla=False
    Slave= False
    Broadcast=False

    root = Tk()
    root.title("IOTHIX")
    root.geometry("860x450")
    root.config(bg="#f0f0f0",bd=5,relief="groove")
    root.resizable(0, 0)
    root.iconbitmap('icono.ico')


    frameBtnMaster=Frame(root, bd=3, relief="sunken",bg="#ff6b0f")
    frameBtnMaster.grid(column=0, row=0, pady=150, padx=40)

    BtnMaster = Button(frameBtnMaster, text="Maestro", height=3, width=30, command=ventanaMaster,fg="#ffffff", bg="#ff6b0f")
    BtnMaster.grid(column=0, row=0)

    frameBtnBroSla = Frame(root, bd=3, relief="sunken", bg="#ff6b0f")
    frameBtnBroSla.grid(column=2, row=0, pady=150, padx=40)

    BtnBroSla = Button(frameBtnBroSla, text="Repetidor-Esclavo", height=3, width=30, command=ventanaBroSla,fg="#ffffff", bg="#ff6b0f")
    BtnBroSla.grid(column=0, row=0)

    frameLogo = Frame(root, bd=3, relief="sunken", bg="#ff6b0f")
    frameLogo.grid(column=1, row=0, pady=150, padx=40)

    image = PhotoImage(file="icono2.png")

    LbImagen = Label(frameLogo, image=image)
    LbImagen.grid(column=0, row=0, pady=10, padx=10)

    root.protocol("WM_DELETE_WINDOW", close_window)
    root.mainloop()

def ventanaMaster ():
    global Master, BtnConectarM, BtnBuscar, DatoRecibido, frameBotones, BtnLeerArchivo, DatoRecibido,BtnVolverM,BtnBrod,BtnSlave,Slave,Broadcast,BrodSla,NombreMaster
    Slave= False
    Broadcast = False
    BrodSla=  False
    # instanciar el objeto Tk para creacion de GUI
    #root.iconify()
    Master = Toplevel()
    Master.title("IOTHIX")
    Master.geometry("290x400")
    Master.config(bg="#f0f0f0", bd=5, relief="groove")
    Master.resizable(0, 0)
    Master.iconbitmap('icono.ico')
    Master.overrideredirect(True) # quitar la barra de nombre junto con los botones de minimizar, maximizar y cerrar

    frameImagen = Frame(Master, bd=3, relief="sunken", bg="#ff6b0f")
    frameImagen.grid(column=0, row=0, pady=10, padx=10)

    image = PhotoImage(file="icono2.png")

    LbImagen = Label(frameImagen, image=image)
    LbImagen.grid(column=0, row=0, pady=10, padx=10)

    frameBotones = Frame(frameImagen, bd=5, relief="groove", bg="#ff6b0f")
    frameBotones.grid(column=0, row=1, pady=10, padx=10)

    # ETIQUETAS PARA IDENTIFICAR A QUE CAMPO CORRESPONDE CADA ITEM
    # LbPuerto = Label(frameBotones, text="Puertos Detectados: ", bg="#f0f0f0")
    # LbPuerto.grid(column=1, row=1, pady=10, padx=10)

    # BOTONES PARA A GENERARA CONEXION SERIAL
    BtnBuscar = Button(frameBotones, text="Buscar Puertos", height=1, width=10, command=actualizar_puertos,
                       fg="#ffffff", bg="#ff6b0f")
    BtnBuscar.grid(column=0, row=0)

    BtnConectarM = Button(frameBotones, text="Conectar", height=1, width=10, state="disabled", command=Abrir_Puerto,
                         fg="#ffffff", bg="#ff6b0f")
    BtnConectarM.grid(column=0, row=1)

    BtnLeerDatos = Button(frameBotones, text='LeerConf', height=1, width=10, command=callleerArc, fg="#ffffff",
                          bg="#ff6b0f")
    BtnLeerDatos.grid(column=0, row=3)

    BtnEnvDatos = Button(frameBotones, text='ConfAcceso', height=1, width=10, command=callenviardatos, fg="#ffffff",
                         bg="#ff6b0f")
    BtnEnvDatos.grid(column=0, row=4)

    BtnEnvDet = Button(frameBotones, text='callFunConf', height=1, width=10, command=callfuncionconf, fg="#ffffff",
                       bg="#ff6b0f")
    BtnEnvDet.grid(column=0, row=5)

    BtnDetener = Button(frameBotones, text='DetEjec', height=1, width=10, command=detener_programa, fg="#ffffff",
                        bg="#ff6b0f")
    BtnDetener.grid(column=0, row=6)

    BtnEnviarCom = Button(frameBotones, text='EnviarC', height=1, width=10, command=EnviarComando, fg="#ffffff",
                          bg="#ff6b0f")
    BtnEnviarCom.grid(column=0, row=7)

    actualizar_puertos()
    #ScrollDatoRecibido = Scrollbar(Master, bg="#f0f0f0", orient='vertical')
    #ScrollDatoRecibido.grid(column=2, row=0, sticky=NS)
    #DatoRecibido = Text(Master, bg="#ffffff", yscrollcommand=ScrollDatoRecibido.set, borderwidth=4)
    NombreMaster=StringVar()

    DatoMaster = Entry(Master, bg="#ffffff", borderwidth=4,width=2,textvariable=NombreMaster,font=('Georgia 20'))
    #DatoRecibido.grid(column=1, row=0, pady=10, padx=10,columnspan=2 , rowspan=5)
    DatoMaster.place(x=180, y=10, width=90, height=50)
    DatoMaster["state"]="disable"

    #if (NombreMaster):

    BtnBrod = Button(Master, text='Broadcast', height=1, width=10, command=ventanaAgregarBroadcast, fg="#ffffff",
                           bg="#ff6b0f")
    BtnBrod.place(x=180, y=200, width=90, height=30)

    BtnSlave = Button(Master, text='Slave', height=1, width=10, command=ventanaAgregarSlave, fg="#ffffff",
                         bg="#ff6b0f")
    BtnSlave.place(x=180, y=250, width=90, height=30)


    LbNomMaster = Label(Master, text="Direccion dispositivo")
    LbNomMaster.place(x=170, y=60, width=110, height=30)

    LbNomMaster2 = Label(Master, text="5 caracteres")
    LbNomMaster2.place(x=180, y=80, width=90, height=30)

    if (Master):# si ventana abierta del master
        root.withdraw() # oculta ventana principal
        Master.deiconify() # muestra ventana Master en primer plano

    BtnVolverM = Button(Master, text='Volver', height=1, width=10, command=volverMasterRoot, fg="#ffffff",
                       bg="#ff6b0f")
    BtnVolverM.place(x=180, y=350, width=90, height=30)

def volverMasterRoot():
    global Master
    try:
        if BtnConectarM["text"] in "Desconectar":
            puerto_serial.close()
        #root.iconify()# mostar ventana como un icono
        Master.destroy()
        root.deiconify()# dar foco a una ventana
        Master=False
    except Exception as e:
        print(e)

def ventanaBroSla ():
    global BrodSla, BtnConectarBS, BtnBuscar, DatoRecibido, frameBotones, BtnLeerArchivo, DatoRecibido,BtnVolverBS,Master
    # instanciar el objeto Tk para creacion de GUI
    #root.iconify()

    BrodSla = Toplevel()
    BrodSla .title("IOTHIX")
    BrodSla .geometry("310x400")
    BrodSla .config(bg="#f0f0f0", bd=5, relief="groove")
    BrodSla .resizable(0, 0)
    BrodSla .iconbitmap('icono.ico')
    BrodSla.overrideredirect(True)# quitar la barra de nombre junto con los botones de minimizar, maximizar y cerrar
    frameImagen = Frame(BrodSla , bd=3, relief="sunken", bg="#ff6b0f")
    frameImagen.grid(column=0, row=0, pady=10, padx=10)

    image = PhotoImage(file="icono2.png")

    LbImagen = Label(frameImagen, image=image)
    LbImagen.grid(column=0, row=0, pady=10, padx=10)

    frameBotones = Frame(frameImagen, bd=5, relief="groove", bg="#ff6b0f")
    frameBotones.grid(column=0, row=1, pady=10, padx=10)

    # ETIQUETAS PARA IDENTIFICAR A QUE CAMPO CORRESPONDE CADA ITEM
    # LbPuerto = Label(frameBotones, text="Puertos Detectados: ", bg="#f0f0f0")
    # LbPuerto.grid(column=1, row=1, pady=10, padx=10)

    # BOTONES PARA A GENERARA CONEXION SERIAL
    BtnBuscar = Button(frameBotones, text="Buscar Puertos", height=1, width=10, command=actualizar_puertos,
                       fg="#ffffff", bg="#ff6b0f")
    BtnBuscar.grid(column=0, row=0)

    BtnConectarBS = Button(frameBotones, text="Conectar", height=1, width=10, state="disabled", command=Abrir_Puerto,
                         fg="#ffffff", bg="#ff6b0f")
    BtnConectarBS.grid(column=0, row=1)

    BtnLeerDatos = Button(frameBotones, text='LeerConf', height=1, width=10, command=callleerArc, fg="#ffffff",
                          bg="#ff6b0f")
    BtnLeerDatos.grid(column=0, row=3)

    BtnEnvDatos = Button(frameBotones, text='ConfAcceso', height=1, width=10, command=callenviardatos, fg="#ffffff",
                         bg="#ff6b0f")
    BtnEnvDatos.grid(column=0, row=4)

    BtnEnvDet = Button(frameBotones, text='callFunConf', height=1, width=10, command=callfuncionconf, fg="#ffffff",
                       bg="#ff6b0f")
    BtnEnvDet.grid(column=0, row=5)

    BtnDetener = Button(frameBotones, text='DetEjec', height=1, width=10, command=detener_programa, fg="#ffffff",
                        bg="#ff6b0f")
    BtnDetener.grid(column=0, row=6)

    BtnEnviarCom = Button(frameBotones, text='EnviarC', height=1, width=10, command=EnviarComando, fg="#ffffff",
                          bg="#ff6b0f")
    BtnEnviarCom.grid(column=0, row=7)

    actualizar_puertos()
    # ScrollDatoRecibido = Scrollbar(Master, bg="#f0f0f0", orient='vertical')
    # ScrollDatoRecibido.grid(column=2, row=0, sticky=NS)
    # DatoRecibido = Text(Master, bg="#ffffff", yscrollcommand=ScrollDatoRecibido.set, borderwidth=4)
    NombreBrodSla = StringVar()
    DatoBrodSla = Entry(BrodSla, bg="#ffffff", borderwidth=4, width=2, textvariable=NombreBrodSla, font=('Georgia 20'))
    # DatoRecibido.grid(column=1, row=0, pady=10, padx=10,columnspan=2 , rowspan=5)
    DatoBrodSla.place(x=180, y=10, width=90, height=50)

    LbNomBrodSla = Label(BrodSla, text="Direccion dispositivo")
    LbNomBrodSla.place(x=170, y=60, width=110, height=30)

    LbNomBrodSla2 = Label(BrodSla, text="5 caracteres")
    LbNomBrodSla2.place(x=180, y=80, width=90, height=30)

    if (BrodSla):
        root.withdraw()
        BrodSla.deiconify()

    BtnVolverBS= Button(BrodSla, text='Volver', height=1, width=10, command=volverBroSlaRoot, fg="#ffffff",
           bg="#ff6b0f")
    BtnVolverBS.place(x=180, y=350, width=90, height=30)
    # ScrollDatoRecibido.config(command=DatoRecibido.yview)
    # root.protocol("WM_DELETE_WINDOW", close_window)

def volverBroSlaRoot():
    if BtnConectarBS["text"] in "Desconectar":
        puerto_serial.close()
    #root.iconify()
    BrodSla.destroy()
    root.deiconify()

def ventanaAgregarSlave ():
    global Slave, BtnConectarS, BtnBuscar, DatoRecibido, frameBotones, BtnLeerArchivo, DatoRecibido,BtnVolverS ,Master
    # instanciar el objeto Tk para creacion de GUI
    #root.iconify()

    Slave = Toplevel()
    Slave .title("IOTHIX")
    Slave .geometry("310x400")
    Slave .config(bg="#f0f0f0", bd=5, relief="groove")
    Slave .resizable(0, 0)
    Slave .iconbitmap('icono.ico')
    Slave.overrideredirect(True)# quitar la barra de nombre junto con los botones de minimizar, maximizar y cerrar
    frameImagen = Frame(Slave , bd=3, relief="sunken", bg="#ff6b0f")
    frameImagen.grid(column=0, row=0, pady=10, padx=10)

    image = PhotoImage(file="icono2.png")

    LbImagen = Label(frameImagen, image=image)
    LbImagen.grid(column=0, row=0, pady=10, padx=10)

    frameBotones = Frame(frameImagen, bd=5, relief="groove", bg="#ff6b0f")
    frameBotones.grid(column=0, row=1, pady=10, padx=10)

    # ETIQUETAS PARA IDENTIFICAR A QUE CAMPO CORRESPONDE CADA ITEM
    # LbPuerto = Label(frameBotones, text="Puertos Detectados: ", bg="#f0f0f0")
    # LbPuerto.grid(column=1, row=1, pady=10, padx=10)

    # BOTONES PARA A GENERARA CONEXION SERIAL
    BtnBuscar = Button(frameBotones, text="Buscar Puertos", height=1, width=10, command=actualizar_puertos,
                       fg="#ffffff", bg="#ff6b0f")
    BtnBuscar.grid(column=0, row=0)

    BtnConectarS = Button(frameBotones, text="Conectar", height=1, width=10, state="disabled", command=Abrir_Puerto,
                         fg="#ffffff", bg="#ff6b0f")
    BtnConectarS.grid(column=0, row=1)

    BtnLeerDatos = Button(frameBotones, text='LeerConf', height=1, width=10, command=callleerArc, fg="#ffffff",
                          bg="#ff6b0f")
    BtnLeerDatos.grid(column=0, row=3)

    BtnEnvDatos = Button(frameBotones, text='ConfAcceso', height=1, width=10, command=callenviardatos, fg="#ffffff",
                         bg="#ff6b0f")
    BtnEnvDatos.grid(column=0, row=4)

    BtnEnvDet = Button(frameBotones, text='callFunConf', height=1, width=10, command=callfuncionconf, fg="#ffffff",
                       bg="#ff6b0f")
    BtnEnvDet.grid(column=0, row=5)

    BtnDetener = Button(frameBotones, text='DetEjec', height=1, width=10, command=detener_programa, fg="#ffffff",
                        bg="#ff6b0f")
    BtnDetener.grid(column=0, row=6)

    BtnEnviarCom = Button(frameBotones, text='EnviarC', height=1, width=10, command=EnviarComando, fg="#ffffff",
                          bg="#ff6b0f")
    BtnEnviarCom.grid(column=0, row=7)

    actualizar_puertos()
    # ScrollDatoRecibido = Scrollbar(Master, bg="#f0f0f0", orient='vertical')
    # ScrollDatoRecibido.grid(column=2, row=0, sticky=NS)
    # DatoRecibido = Text(Master, bg="#ffffff", yscrollcommand=ScrollDatoRecibido.set, borderwidth=4)
    NombreSlave = StringVar()
    DatoSlave = Entry(Slave, bg="#ffffff", borderwidth=4, width=2, textvariable=NombreSlave, font=('Georgia 20'))
    # DatoRecibido.grid(column=1, row=0, pady=10, padx=10,columnspan=2 , rowspan=5)
    DatoSlave.place(x=180, y=10, width=90, height=50)

    LbNomSlave = Label(Slave, text="Direccion dispositivo")
    LbNomSlave.place(x=170, y=60, width=110, height=30)

    LbNomSlave2 = Label(Slave, text="5 caracteres")
    LbNomSlave2.place(x=180, y=80, width=90, height=30)

    if Slave:
        Master.withdraw()
        Slave.deiconify()
        #print("Abriendo ventana slave")

    BtnVolverS= Button(Slave, text='Volver', height=1, width=10, command=volverSlaveMaster, fg="#ffffff",
           bg="#ff6b0f")
    BtnVolverS.place(x=180, y=350, width=90, height=30)
    # ScrollDatoRecibido.config(command=DatoRecibido.yview)
    # root.protocol("WM_DELETE_WINDOW", close_window)

def volverSlaveMaster():
    if BtnConectarS["text"] in "Desconectar":
        puerto_serial.close()
    Slave.destroy()
    Master.deiconify()
    print("volviendo de slave a master")

def ventanaAgregarBroadcast():
    global Broadcast, BtnConectarB, BtnBuscar, DatoRecibido, frameBotones, BtnLeerArchivo, DatoRecibido, BtnVolverB
    # instanciar el objeto Tk para creacion de GUI
    # root.iconify()

    Broadcast = Toplevel()
    Broadcast.title("IOTHIX")
    Broadcast.geometry("310x400")
    Broadcast.config(bg="#f0f0f0", bd=5, relief="groove")
    Broadcast.resizable(0, 0)
    Broadcast.iconbitmap('icono.ico')
    Broadcast.overrideredirect(True)  # quitar la barra de nombre junto con los botones de minimizar, maximizar y cerrar
    frameImagen = Frame(Broadcast, bd=3, relief="sunken", bg="#ff6b0f")
    frameImagen.grid(column=0, row=0, pady=10, padx=10)

    image = PhotoImage(file="icono2.png")

    LbImagen = Label(frameImagen, image=image)
    LbImagen.grid(column=0, row=0, pady=10, padx=10)

    frameBotones = Frame(frameImagen, bd=5, relief="groove", bg="#ff6b0f")
    frameBotones.grid(column=0, row=1, pady=10, padx=10)

    # ETIQUETAS PARA IDENTIFICAR A QUE CAMPO CORRESPONDE CADA ITEM
    # LbPuerto = Label(frameBotones, text="Puertos Detectados: ", bg="#f0f0f0")
    # LbPuerto.grid(column=1, row=1, pady=10, padx=10)

    # BOTONES PARA A GENERARA CONEXION SERIAL
    BtnBuscar = Button(frameBotones, text="Buscar Puertos", height=1, width=10, command=actualizar_puertos,
                       fg="#ffffff", bg="#ff6b0f")
    BtnBuscar.grid(column=0, row=0)

    BtnConectarB = Button(frameBotones, text="Conectar", height=1, width=10, state="disabled", command=Abrir_Puerto,
                         fg="#ffffff", bg="#ff6b0f")
    BtnConectarB.grid(column=0, row=1)

    BtnLeerDatos = Button(frameBotones, text='LeerConf', height=1, width=10, command=callleerArc, fg="#ffffff",
                          bg="#ff6b0f")
    BtnLeerDatos.grid(column=0, row=3)

    BtnEnvDatos = Button(frameBotones, text='ConfAcceso', height=1, width=10, command=callenviardatos, fg="#ffffff",
                         bg="#ff6b0f")
    BtnEnvDatos.grid(column=0, row=4)

    BtnEnvDet = Button(frameBotones, text='callFunConf', height=1, width=10, command=callfuncionconf, fg="#ffffff",
                       bg="#ff6b0f")
    BtnEnvDet.grid(column=0, row=5)

    BtnDetener = Button(frameBotones, text='DetEjec', height=1, width=10, command=detener_programa, fg="#ffffff",
                        bg="#ff6b0f")
    BtnDetener.grid(column=0, row=6)

    BtnEnviarCom = Button(frameBotones, text='EnviarC', height=1, width=10, command=EnviarComando, fg="#ffffff",
                          bg="#ff6b0f")
    BtnEnviarCom.grid(column=0, row=7)

    actualizar_puertos()
    # ScrollDatoRecibido = Scrollbar(Master, bg="#f0f0f0", orient='vertical')
    # ScrollDatoRecibido.grid(column=2, row=0, sticky=NS)
    # DatoRecibido = Text(Master, bg="#ffffff", yscrollcommand=ScrollDatoRecibido.set, borderwidth=4)
    NombreBroadcast = StringVar()
    DatoBroadcast = Entry(Broadcast, bg="#ffffff", borderwidth=4, width=2, textvariable=NombreBroadcast, font=('Georgia 20'))
    # DatoRecibido.grid(column=1, row=0, pady=10, padx=10,columnspan=2 , rowspan=5)
    DatoBroadcast.place(x=180, y=10, width=90, height=50)

    LbNomBroadcast = Label(Broadcast, text="Direccion dispositivo")
    LbNomBroadcast.place(x=170, y=60, width=110, height=30)

    LbNomBroadcast2 = Label(Broadcast, text="5 caracteres")
    LbNomBroadcast2.place(x=180, y=80, width=90, height=30)

    if (Broadcast):
        Master.withdraw()
        Broadcast.deiconify()

    BtnVolverB = Button(Broadcast, text='Volver', height=1, width=10, command=volverBrodMaster, fg="#ffffff",
                       bg="#ff6b0f")
    BtnVolverB.place(x=180, y=350, width=90, height=30)
    # ScrollDatoRecibido.config(command=DatoRecibido.yview)
    # root.protocol("WM_DELETE_WINDOW", close_window)

def volverBrodMaster():
    if BtnConectarB["text"] in "Desconectar":
        puerto_serial.close()
    Broadcast.destroy()
    Master.deiconify()

def verificar_conexion(args):

    if "-" in pulso_actualizar.get() :#or "-" in pulso_baudios.get() or "-" in pulso_dbits.get() :
        if Master and Slave:
            BtnConectarS["state"] = "disable"
        elif Master and Broadcast:
            BtnConectarB["state"] = "disable"
        elif BrodSla:
            BtnConectarBS["state"] = "disable"
        elif Slave:
            BtnConectarS["state"] = "disable"
        else:
            BtnConectarM["state"] = "disable"
    else:
        if Master and Slave:
            BtnConectarS["state"] = "active"
        elif Master and Broadcast:
            BtnConectarB["state"] = "active"
        elif BrodSla:
            BtnConectarBS["state"] = "active"
        elif Slave:
            BtnConectarS["state"] = "active"
        else:
            BtnConectarM["state"] = "active"

def actualizar_puertos():
    global pulso_actualizar, desplegar_puertos
    #retorna en una lista los puertos detectados
    ports = serial.tools.list_ports.comports()
    #recorre la lista y asigna de forma dinamica los puertos encontrados
    coms = [com[0] for com in ports]
    coms.insert(0, "-")
    try:
        pulso_actualizar = StringVar()
        pulso_actualizar.set(coms[0])
        desplegar_puertos = OptionMenu(frameBotones, pulso_actualizar, *coms, command=verificar_conexion)
        desplegar_puertos.config(width=6,fg="#ffffff",bg="#ff6b0f")
        desplegar_puertos.grid(column=0, row=2)
        verificar_conexion(0)
    except Exception as e:
        desplegar_puertos.destroy()
        print("Error funcion update_coms")
        print(e)

def readSerial(puerto_open):
    global serialData
    while serialData:
        if puerto_open.is_open:
            data = puerto_open.readline()
            print(f'dato recibido: {data} ')
            if len(data) > 0:
                try:
                    trama_util = str(data)
                    #quitar de a trama los caracteres que no son utiles, las letras mayusculas NO pueden ser eliminadas usando este metodo
                    trama_filtrada = trama_util.strip("'b'\\r\\n")
                    imprimir_valor(trama_filtrada)
                except:
                    print("Error lectura del puerto serial")
#los datos capturados a traves del puerto serial son enviados a los label correspondientes
def imprimir_valor(trama):   
    
    DatoRecibido.insert(END,f'{trama}\n')
    puerto_serial.flush()

def callfuncionconf():
    try:
        if BtnConectar["text"] in "Desconectar":
            puerto_serial.write('Enviar()\n\r'.encode())
            DatoRecibido.delete("1.0","end")
            print('Ingreso a configuracion'.encode())
    except:
        print("Problemas envio")
def callenviardatos():
    try:
        if BtnConectar["text"] in "Desconectar":
            direcciones = DatoRecibido.get("1.0", END)
            puerto_serial.write(f'Configurar_Acceso({direcciones})\n\r'.encode())
            DatoRecibido.delete("1.0", "end")
            print('Envio paquete de datos'.encode())
    except:
        print("Problemas envio")

def callleerArc():
    try:
        if BtnConectar["text"] in "Desconectar":
            puerto_serial.write('Leer_Archivo()\n\r'.encode())
            DatoRecibido.delete("1.0", "end")
            print('Lectura de configuracion actual'.encode())
    except:
        print("Problemas envio")

def Abrir_Puerto():
    global serialData, puerto_serial,BtnLeerArchivo,BtnVolver,BtnVolverM,port,baud,dbits
    #agregar condicion cuando este dentro del submenu slave y broadcast

    if Master and Slave:
        if BtnConectarS["text"] in "Desconectar":
            serialData = False
            BtnConectarS["text"] = "Conectar"
            BtnBuscar["state"] = "active"
            desplegar_puertos["state"] = "active"
            #        DatoRecibido.delete("1.0", "end")
            BtnVolverS["state"] = "active"
            puerto_serial.close()
        else:
            serialData = True
            BtnConectarS["text"] = "Desconectar"
            BtnBuscar["state"] = "disable"
            desplegar_puertos["state"] = "disable"
            BtnVolverS["state"] = "disable"
            port = pulso_actualizar.get()
            baud = 115200
            dbits = 8
            try:
                puerto_serial = serial.Serial(port=port, baudrate=baud, bytesize=dbits, timeout=None)
            except:
                print("Error funcion connexion")
            # se crea hilo de apertura de puertos seriales
            t1 = threading.Thread(target=readSerial, args=(puerto_serial,))
            t1.deamon = True
            t1.start()
    elif Master and Broadcast:
        if BtnConectarB["text"] in "Desconectar":
            serialData = False
            BtnConectarB["text"] = "Conectar"
            BtnBuscar["state"] = "active"
            desplegar_puertos["state"] = "active"
            #        DatoRecibido.delete("1.0", "end")
            BtnVolverB["state"] = "active"
            puerto_serial.close()
        else:
            serialData = True
            BtnConectarB["text"] = "Desconectar"
            BtnBuscar["state"] = "disable"
            desplegar_puertos["state"] = "disable"
            BtnVolverB["state"] = "disable"
            port = pulso_actualizar.get()
            baud = 115200
            dbits = 8
            try:
                puerto_serial = serial.Serial(port=port, baudrate=baud, bytesize=dbits, timeout=None)
            except:
                print("Error funcion connexion")
            # se crea hilo de apertura de puertos seriales
            t1 = threading.Thread(target=readSerial, args=(puerto_serial,))
            t1.deamon = True
            t1.start()
    elif Master :
        if BtnConectarM["text"] in "Desconectar":
            serialData = False
            BtnConectarM["text"] = "Conectar"
            BtnBuscar["state"] = "active"
            desplegar_puertos["state"] = "active"
            #        DatoRecibido.delete("1.0", "end")
            BtnVolverM["state"] = "active"
            BtnBrod["state"] = "active"
            BtnSlave["state"] = "active"
            puerto_serial.close()
        else:
            serialData = True
            BtnConectarM["text"] = "Desconectar"
            BtnBuscar["state"] = "disable"
            desplegar_puertos["state"] = "disable"
            BtnVolverM["state"] = "disable"
            BtnBrod["state"] = "disable"
            BtnSlave["state"] = "disable"
            port = pulso_actualizar.get()
            baud = 115200
            dbits = 8
            try:
                puerto_serial = serial.Serial(port=port, baudrate=baud, bytesize=dbits, timeout=None)
            except:
                print("Error funcion connexion")
            # se crea hilo de apertura de puertos seriales
            t1 = threading.Thread(target=readSerial, args=(puerto_serial,))
            t1.deamon = True
            t1.start()
    else:
        if BtnConectarBS["text"] in "Desconectar":
            serialData = False
            BtnConectarBS["text"] = "Conectar"
            BtnBuscar["state"] = "active"
            desplegar_puertos["state"] = "active"
            #        DatoRecibido.delete("1.0", "end")
            BtnVolverBS["state"] = "active"
            puerto_serial.close()
        else:
            serialData = True
            BtnConectarBS["text"] = "Desconectar"
            BtnBuscar["state"] = "disable"
            desplegar_puertos["state"] = "disable"
            BtnVolverBS["state"] = "disable"
            port = pulso_actualizar.get()
            baud = 115200
            dbits = 8
            try:
                puerto_serial = serial.Serial(port=port, baudrate=baud, bytesize=dbits, timeout=None)
            except:
                print("Error funcion connexion")
            # se crea hilo de apertura de puertos seriales
            t1 = threading.Thread(target=readSerial, args=(puerto_serial,))
            t1.deamon = True
            t1.start()



def close_window():
    global root, serialData
    if messagebox.askokcancel("Cerrar", "Quiere finalizar la apliacion de configuracion?"):
        serialData = False
        root.destroy()

def detener_programa():
    puerto_serial.write('\x03'.encode())
    DatoRecibido.delete("1.0", "end")

def EnviarComando():
    comando=DatoRecibido.get("1.0",END)
    puerto_serial.write(f'{comando}\n\r'.encode())
    DatoRecibido.delete("1.0", "end")
    print(comando)

Programa()
#root.protocol("WM_DELETE_WINDOW", close_window)
#root.mainloop()